/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuidv4 } = require("uuid");
const fs = require("fs").promises;

const app = express();

app.use(bodyParser.json());
let todos = [];

async function writeTodosToFile() {
  // try {
  //   await fs.writeFile("todos.txt", JSON.stringify(todos));
  //   console.log("File written successfully.");
  // } catch (error) {
  //   console.error("Error writing file:", error);
  // }
}
// app.use("/", (req, res) => {
//   res.send("Hello World!!!");
// });
// app.use("/todos", todoRoutes);

// curl localhost:3000/todos/
app.get("/todos", (req, res) => {
  res.send(todos);
});

// curl localhost:3000/todos/<id-here>
app.get("/todos/:id", (req, res) => {
  const todoSearch = todos.filter((todo) => todo.id === req.params.id);
  if (todoSearch) res.send(todoSearch);
  else res.status(404).send("");
});

// curl -X POST localhost:3000/todos/    -d '{"title": "todo", "description": "todo this todo"}'   -H "Content-Type: application/json"
app.post("/todos", (req, res) => {
  const todo = req.body;
  todo.id = uuidv4();
  todos.push(todo);
  writeTodosToFile();
  res.status(201).send("added todo successfully");
});

// curl -X PUT localhost:3000/todos/0b6427ff-de24-4afb-b4f4-9ae8c16424ed   -d '{"title": "todonew", "description": "todonew this todonew"}'   -H "Content-Type: application/json"
app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  const { title, description } = req.body;
  const todoToUpdate = todos.find((todo) => todo.id === id);
  // todos.map((todo) => {
  //   if (todo.id === id) {
  //     (todo.title = title), (todo.description = description);
  //   }
  // });
  if (todoToUpdate) {
    todoToUpdate.title = title;
    todoToUpdate.description = description;
    writeTodosToFile();
    res.status(204).send(`edited todo successfully ${todos}`);
  } else {
    res.status(404).send(`Todo with ID ${id} not found.`);
  }
});

// curl -X DELETE localhost:3000/todos/
app.delete("/todos/:id", (req, res) => {
  id = req.params.id;
  todos = todos.filter((todo) => todo.id !== id);
  writeTodosToFile();
  console.log(todos);
  res.send("Deleted successfully");
});

app.listen(3000, () => {
  console.log("server started on port 3000");
});

module.exports = app;
