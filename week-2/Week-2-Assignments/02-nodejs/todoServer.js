/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const path = require('path');
  
  const app = express();
  const port = 3000;
  
  app.use(express.static(path.join(__dirname, 'public')));

  app.use(bodyParser.json());
  
  const filePath = path.join(__dirname, 'todos.txt');
  const delimiter = '|';
  let todos = []; // Initialize an empty array to store todos
  
  function readTodosFromFile() {
      try {
          if (fs.existsSync(filePath)) {
              const fileContent = fs.readFileSync(filePath, 'utf-8');
              const lines = fileContent.split('\n');
  
              todos = lines.map(line => {
                  const [id, title, ...descriptionParts] = line.split(delimiter);
                  const description = descriptionParts.join(delimiter).trim();
                  return { id: parseInt(id), title, description };
              });
          } else {
              console.error('File not found:', filePath);
              todos = [];
          }
      } catch (error) {
          console.error('Error reading file:', error);
          todos = [];
      }
  }
  
  function saveTodosToFile() {
      const todosString = todos.map(todo => `${todo.id}${delimiter}${todo.title}${delimiter}${todo.description}`).join('\n');
      fs.writeFileSync(filePath, todosString, 'utf-8');
  }
  

  function getTodoById(req, res) {
    const todoId = parseInt(req.params.id);

    try {
        // Read todos from the file
        readTodosFromFile();

        const todo = todos.find(item => item.id === todoId);

        if (todo) {
            res.status(200).json(todo);
        } else {
            res.status(404).send('Not Found');
        }
    } catch (error) {
        res.status(500).send('Internal Server Error');
    }
}


function addTodo(req,res){
    
}

  
  function reading_all(req, res) {
      try {
          readTodosFromFile();
          res.status(200).json(todos);
      } catch (error) {
          res.status(500).send("Internal Server Error");
      }
  }
  
  app.get('/todos', reading_all);
  app.get('/todos/:id', getTodoById);
  
  function started() {
      console.log(`app listening on port ${port}`);
  }
  
  app.listen(port, started);
  
  module.exports = app;
  