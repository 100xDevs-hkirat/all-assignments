/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const cors = require("cors");

require('dotenv').config();

const app = express();
const PORT = 3001;
app.use(bodyParser.json());
app.use(cors());


mongoose.connect(process.env.MONGOOSE_CONNECTION_STRING, { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => {
  console.log('Connected to MongoDB');
})
.catch((error) => {
  console.error('Error connecting to MongoDB:', error);
});

let TodosSchema = new mongoose.Schema({
  title: {
    type:String
  },
  description: {
    type:String
  }
});

const Todos = mongoose.model('Todos', TodosSchema);

app.get("/todos", async (req,res) => {
  const todo = await Todos.find({});
  res.json({Todos: todo});
})

app.get("/todos/:id", async (req,res) => {
  const id = req.params.id;
  const todo = await Todos.findById(id);
  if(todo) {
    res.json({Todo: todo});
  }
  else {
    res.status(402).json({message: "Todo Id not found"});
  }
})

app.post("/todos", (req,res) => {
  const todo = req.body;
  const newTodo = new Todos({
    title:todo.title,
    description:todo.description});
  newTodo.save();
  res.json({message:'Todo Created Successfully', newTodo});
});


app.put("/todos/:id", async (req,res) => {
  const todo = await Todos.findByIdAndUpdate(req.params.id, req.body,  {new: true});
  if(todo) {
    res.json({message: "Updated Successfully", todo});
  }
  else {
    res.status(404).json({ message: 'Id not found' });
  }
})

app.delete("/todos/:id", async (req, res) => {
  const deletedTodo = await Todos.findOneAndDelete({ _id: req.params.id});
  if(deletedTodo) {
    res.json({message: 'Deleted Successfully'});
  }
  else {
    res.json({message: 'Id not found'});
  }
})

module.exports = app;
app.listen(PORT, () => {
  console.log(`Server Listing at Port ${PORT}`);
})
