/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const uuid = require('uuid');
const fs = require('fs');
const { log } = require('console');
const filePath = "./files/todoData.json";

const app = express();

app.use(bodyParser.json());

app.use((req, res, next) => {
    res.setHeader('Content-Type', 'application/json');
    next();
});

app.get('/todos', (req, res) => {
    loadData(res, data => {
        res.status(200).send(JSON.stringify(Object.values(data.todos)));
    });
})

app.get('/todos/:id', (req, res) => {
    loadData(res, data => {
        let result = data.todos[req.params.id];
        if (result === undefined) res.sendStatus(404);
        res.status(200).send(JSON.stringify(result));
    })
})

app.post('/todos', (req, res) => {
    loadData(res, data => {
        let id = uuid.v4();
        data.todos[id] = {
                id,
                title: req.body.title,
                completed: req.body.completed,
                description: req.body.description
        };
        writeData(data,()=>{
            res.status(201).send(JSON.stringify({ id }));
        })
    })
})

app.put('/todos/:id', (req, res) => {
    loadData(res, data => {
        if(data.todos[req.params.id]){
            data.todos[req.params.id].title = req.body.title;
            data.todos[req.params.id].description = req.body.description;
            writeData(data,()=>{
                res.status(201).send()
            })
            res.sendStatus(200);
        } else {
            res.sendStatus(404);
        }
    })
})

app.delete('/todos/:id',(req,res)=>{
    loadData(res,data=>{
        if(data.todos[req.params.id]){
            delete data.todos[req.params.id];
            writeData(data,()=>{
                res.sendStatus(200);
            })
        } else {
            res.sendStatus(404);
        }
    })
})

const fileError = (error, res) => {
    console.log("Internal Error:", error);
    return res.status(500).send(JSON.stringify({
        status: "failure",
        message: error.message
    }))
}

//This function will load and parse the data. Also it handles the Error
const loadData = (res, cllbck) => {
    fs.readFile(filePath, (err, data) => {
        if (err) {
            return fileError(err, res);
        }
        if (data) {
            return cllbck(JSON.parse(data.toString()));
        }
    })
}

//Wrapper function to write the data to the JSON file
const writeData = (data,cllbck) => {
    fs.writeFile(filePath,JSON.stringify(data,null,4),cllbck);
}

//app.listen(3000);
console.log("Server started at 3000");

module.exports = app;
