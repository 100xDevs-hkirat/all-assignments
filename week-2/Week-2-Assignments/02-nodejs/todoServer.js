/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

const todos = [];

app.get("/todos", (res, req) => {
  res.json(todos);
});

app.get("/todos/:id", (req, res) => {
  const Id = req.params.id;
  const specificTodo = todos.find((todo) => todo.id === Id);
  if (specificTodo) {
    const { title, description } = specificTodo;
    res.status(200).json({ title, description });
  } else {
    res.sendStatus(404);
  }
});

app.post("/todos", (res, req) => {
  const newTodo = {
    id: Math.floor(Math.random() * 10000),
    title: req.body.title,
    description: req.body.description,
    completed: false,
  };
  todos.push(newTodo);
  res.json(newTodo);
});

app.put("/todos/:id", (req, res) => {
  const Id = req.params.id;

  const updatebleTodo = todos.find((item) => item.id === Id);
  if (!updatebleTodo) {
    res.status(404);
  }
  todos = todos.map((item) => {
    if (item.id == Id) {
      return {
        id: Id,
        title: req.body.title,
        completed: true,
      };
    }
    return item;
  });
  res.json(updatebleTodo);
});

app.delete("/todos/:id", (res, req) => {
  const todoId = req.params.id;
  dltTodo = todos.findIndex((todo) => todo.id === todoId);
  if (dltTodo == -1) {
    res.status(404);
  } else {
    todos.splice(dltTodo, 1);
    res.status(200).send();
  }
});
// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();
});

app.listen(3000, () => {
    console.log('Server is listening on port 3000');
  });


module.exports = app;
