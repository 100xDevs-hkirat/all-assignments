/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const {v1 : uuid} = require('uuid')
const app = express();

app.use(bodyParser.json());

var todos = [
  {id:1,title:'phone', description: 'get an Apple Iphone',},
  {id:2,title:'groceries', description: 'buy milk and bread'},
  {id:3,title:'laundry', description: 'do the laundry'},
  {id:4,title:'homework', description: 'complete math homework'},
  {id:5,title:'gym', description: 'go to the gym'},
  {id:6,title:'dinner', description: 'cook dinner'}
];

// importing todos in json file with some logic :)
const updateJsonData = () => {
  fs.readFile('./todosDb.json', 'utf8', (err, data)=> {
    if(err) console.log('erorrrrrr');
    if(data.length > 1) {
      let parsedData = JSON.parse(data);
      for(let todo of parsedData) {
        if(todos.some(t=>t.id !== todo.id)) {
          let jsonData = JSON.stringify(todos);
          
          fs.writeFile('./todosDb.json', jsonData, 'utf8', (err) => {
            if(err) console.error('error while adding todos in json file');
            console.log(jsonData);
            console.log('succesfully overwriten !');
          })
          break;
        }else {
          return ;
        }
      }
    }else {
      let jsonData = JSON.stringify(todos);
      fs.writeFile('./todosDb.json', jsonData, 'utf-8', (err) => {
        if(err) console.error('error while adding todos in json file');
        console.log('succesfully written !');
      })
    }
  })
}

updateJsonData();

app.get('/todos', (req,res)=> {
  fs.readFile('./todosDb.json', 'utf8', (err, data)=> {
    if(err) res.status(404).send('data not found !');
    let parsedData = JSON.parse(data);
      res.send(parsedData);
  });
});

app.get('/todos/:id', (req,res)=> {
  fs.readFile('./todosDb.json', 'utf8', (err, data)=> {
    if(err) res.status(404).send('data not found !');
    let parsedData = JSON.parse(data);
    let todoFound = new Map();
    let temp = 0;
    for(let todo of parsedData) {
      if(todo.id == req.params.id) {
        temp = todo.id;
        todoFound.set(todo.id, todo);
        break;
      }
    }
    console.log(temp);
    if(todoFound.size > 0) {
      res.send(todoFound.get(temp));
    }else {
      res.status(404).send('TODO NOT FOUND !!!');
    }
  });
});

app.post('/todos', (req,res)=> {
  const todoExists = todos.some(todo => todo.id === req.body.id && todo.title === req.body.title && todo.description === req.body.description);

  if(!todoExists) {
    todos.push(req.body);
    updateJsonData();
    let msg = req.body.title+'added to the json file !';
    res.send(msg);
  } else {
    res.status(404).send('error');
  }
})

app.put('/todos/:id', (req,res)=> {
  const todoExists = todos.some(todo => todo.id == req.params.id);
  if(todoExists) {
    for(let todo of todos) {
      if(todo.id == req.params.id) {
        todo.title = req.body.title;
        todo.description = req.body.description;
        updateJsonData();
        let msg = "todo : "+ todo.title + "is updated succesfully !";
        res.send(msg);
        break;
      }
    }
  } else {
    res.status(404).send('todo not found !');
  }
})

app.delete('/todos/:id', (req,res)=> {
  const todoExists = todos.some(todo => todo.id == req.params.id);
  if(todoExists) {
    for(let todo of todos) {
      if(todo.id == req.params.id) {
        todos = todos.filter(t => t.id != req.params.id);
        updateJsonData();
        let msg = "todo : "+ todo.title + " is Deleted succesfully !";
        res.send(msg);
        break;
      }
    }
  } else {
    res.status(404).send('todo not found !');
  }
})

app.listen(5000, ()=> {
  console.log('sun raha hoon maiiiiiiiiii !!!!');
})

module.exports = app;
