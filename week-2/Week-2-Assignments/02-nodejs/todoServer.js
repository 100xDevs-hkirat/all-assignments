/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.urlencoded({extended: true}));

let ArrayDatabase = [];

app.get('/todos', (req, res) => { 
  let AnsArr = ArrayDatabase.map((value) => {
    return {title: value.title,
           description: value.description}
  })
  res.status(200).send(AnsArr);
})

app.get('/todos/:idc', (req, res) => {
  let idc = parseInt(req.params.idc);
  let ans = ArrayDatabase.find((value) => {
    return (value.id === Number(idc));
  })
  if(ans){
    let final = {
      title: ans.title,
      description: ans.description
    }
    res.status(200).send(final);
  }
  else{
    res.status(404).send("Invalid id");
  }
})

app.post('/todos', (req, res) => {
  let titleA = req.body.titleB;
  let completedA = req.body.completedB;
  let descriptionA = req.body.descriptionB;

  let randomId = Math.floor((Math.random() * 100) + 1);
  let obj = {
    id: randomId,
    title: titleA,
    completed: completedA,
    description: descriptionA
  }
  ArrayDatabase.push(obj);
  let response = {
    id: randomId
  }
  res.status(201).send(response);
})

app.put("/todos/:idc", (req, res) => {
  let idc = parseInt(req.params.idc);
  let obj = ArrayDatabase.findIndex((value) => {
    return (value.id === idc);
  });
  if(obj !== -1){
    ArrayDatabase[obj].title = req.body.titleB;
    ArrayDatabase[obj].completed = req.body.completedB;
    res.status(200).send("Title updated");
  }
  else{
    res.status(404).send("Error Id not found");
  }
})

app.delete("/todos/:idc", (req, res) => {
  let idc = parseInt(req.params.idc);
  let findId = ArrayDatabase.find((value) => {
    return (value.id === idc);
  });
  if(findId){
    ArrayDatabase = ArrayDatabase.filter((value) => {
      return (value.id !== idc);
    })
    res.status(200).send("Deleted");
  }
  else{
    res.status(404).send("Id not found");
  }
})

app.use((req, res) => {
  res.status(404).send("Invalid URL");
})

// app.listen(3000, () => {
//   console.log("Server running");
// })
// module.exports = app;
