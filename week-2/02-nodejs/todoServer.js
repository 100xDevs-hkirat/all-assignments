/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const app = express();
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
app.use(express.json());

let database=[];
try
{
  const rawdata=fs.readFileSync(__dirname+'/mydb.json','utf-8');
  database=JSON.parse(rawdata);
}
catch(err)
{
  console.error("Error occured while retriving the data.\n",err);
}

//1
app.get('/todos', (req,res) =>{
  res.send(database);
})

//2
app.get('/todos/:id', (req,res) =>{
  let reqdata=database.find(it=>it.id===req.params.id);
  if(reqdata)
    res.status(200).send(reqdata);
  else
    res.status(404).send("Not Found");
})

//3
app.post('/todos',(req,res) =>{
  let newdata={
    id : uuidv4(),
    title : req.body.title,
    description : req.body.description
  };
  database.push(newdata);
  // fs.writeFileSync(__dirname+'/mydb.json',JSON.stringify(database));
  fs.writeFile(__dirname+'/mydb.json',JSON.stringify(database),'utf-8', (err) =>{
    if(err)
      console.error("Error occured while retriving the data.\n",err);
  })
  res.status(201).send({id:newdata.id});
})

//4
app.put('/todos/:id',(req,res) =>{
  let reqdata=database.find(it=>it.id===req.params.id);
  if(reqdata)
  {
    reqdata.title=req.body.title;
    reqdata.description=req.body.description;
    fs.writeFile(__dirname+'/mydb.json',JSON.stringify(database),'utf-8', (err) =>{
      if(err)
        console.error("Error occured while retriving the data.\n",err);
    })
    res.status(200).send("OK");  
  }
  else
    res.status(404).send("Not Found");
})

//5
app.delete('/todos/:id',(req,res) =>{
  let reqdata=database.find(it=>it.id===req.params.id);
  if(reqdata)
  {
    let element_index=database.indexOf(reqdata);
    database.splice(element_index,1);
    fs.writeFile(__dirname+'/mydb.json',JSON.stringify(database),'utf-8', (err) =>{
      if(err)
        console.error("Error occured while retriving the data.\n",err);
    })
    res.status(200).send("OK");
  }
  else
    res.status(404).send("Not Found");
})

// app.listen(3001,()=>{
//   console.log("server is now live");
// })

module.exports = app;