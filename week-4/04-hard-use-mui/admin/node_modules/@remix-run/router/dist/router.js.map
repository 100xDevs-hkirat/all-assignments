{"version":3,"file":"router.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    text?: Submission[\"text\"];\n    formData?: Submission[\"formData\"];\n    json?: Submission[\"json\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers,\n    });\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = getLoadingFetcher(submission);\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(\n      submission,\n      existingFetcher ? existingFetcher.data : undefined\n    );\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let activeSubmission =\n      submission || getSubmissionFromNavigation(state.navigation);\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: getLoadingNavigation(redirectLocation),\n        fetcherSubmission: activeSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a submission, we will preserve it through the redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        activeSubmission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => createUseMatchesMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They only set `defaultShouldRevalidate` on\n    // explicit revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n    //\n    // They automatically revalidate without even calling shouldRevalidate if:\n    // - They were cancelled\n    // - They're in the middle of their first load and therefore this is still\n    //   an initial load and not a revalidation\n    //\n    // If neither of those is true, then they _always_ check shouldRevalidate\n    let fetcher = state.fetchers.get(key);\n    let isPerformingInitialLoad =\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined &&\n      // If a fetcher.load redirected then it'll be \"loading\" without any data\n      // so ensure we're not processing the redirect from this fetcher\n      !fetchRedirectIds.has(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate =\n      cancelledFetcherLoads.includes(key) ||\n      isPerformingInitialLoad ||\n      shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n    \" _hasFetcherDoneAnything \": true,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n    \" _hasFetcherDoneAnything \": true,\n  };\n  return fetcher;\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","deleteBlocker","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","getDoneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref3","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","isPerformingInitialLoad","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","protocol","isSameBasename","contentType","isDeferredData","_result$init","_result$init2","deferred","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp4","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":"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"}