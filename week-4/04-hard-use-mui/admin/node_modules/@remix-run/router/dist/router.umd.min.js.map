{"version":3,"file":"router.umd.min.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    text?: Submission[\"text\"];\n    formData?: Submission[\"formData\"];\n    json?: Submission[\"json\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers,\n    });\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = getLoadingFetcher(submission);\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(\n      submission,\n      existingFetcher ? existingFetcher.data : undefined\n    );\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let activeSubmission =\n      submission || getSubmissionFromNavigation(state.navigation);\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: getLoadingNavigation(redirectLocation),\n        fetcherSubmission: activeSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a submission, we will preserve it through the redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        activeSubmission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => createUseMatchesMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They only set `defaultShouldRevalidate` on\n    // explicit revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n    //\n    // They automatically revalidate without even calling shouldRevalidate if:\n    // - They were cancelled\n    // - They're in the middle of their first load and therefore this is still\n    //   an initial load and not a revalidation\n    //\n    // If neither of those is true, then they _always_ check shouldRevalidate\n    let fetcher = state.fetchers.get(key);\n    let isPerformingInitialLoad =\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined &&\n      // If a fetcher.load redirected then it'll be \"loading\" without any data\n      // so ensure we're not processing the redirect from this fetcher\n      !fetchRedirectIds.has(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate =\n      cancelledFetcherLoads.includes(key) ||\n      isPerformingInitialLoad ||\n      shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n    \" _hasFetcherDoneAnything \": true,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n    \" _hasFetcherDoneAnything \": true,\n  };\n  return fetcher;\n}\n//#endregion\n"],"names":["Action","exports","PopStateEventType","invariant","value","message","Error","warning","cond","console","warn","e","getHistoryState","location","index","usr","state","key","idx","createLocation","current","to","_extends","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","options","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","DOMException","name","assign","replace","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","DeferredData","constructor","data","responseInit","reject","this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","entries","acc","trackPromise","done","init","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","async","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","ErrorResponse","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","UNSAFE_DEFERRED_SYMBOL","Symbol","normalizeTo","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","m","hasNakedIndexQuery","normalizeNavigateOptions","normalizeFormMethod","isFetcher","opts","body","isSubmissionNavigation","isValidMethod","getInternalRouterError","method","searchParams","getInvalidBodyError","type","rawFormMethod","toUpperCase","stripHashFromPath","isMutationMethod","FormData","URLSearchParams","_ref3","String","submission","parse","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","getMatchesToLoad","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchLoadMatches","fetchRedirectIds","routesToUse","pendingActionData","pendingError","actionResult","values","currentUrl","nextUrl","keys","navigationMatches","lazy","loader","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","loaderData","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","revalidatingFetchers","f","routeId","fetcherMatches","fetcher","fetchers","isPerformingInitialLoad","has","fetcherMatch","getTargetMatch","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","callLoaderOrAction","request","resultType","onReject","runHandler","handler","context","requestContext","all","isResponse","headers","isStaticRequest","protocol","isSameBasename","set","redirect","revalidate","isRouteRequest","response","contentType","statusCode","isDeferredData","deferred","deferredData","_result$init","_result$init2","Headers","createClientSideRequest","Request","processRouteLoaderData","matchesToLoad","results","activeDeferreds","errors","foundError","loaderHeaders","isRedirectResult","isErrorResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","doneFetcher","getDoneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","hasOwnProperty","reverse","find","getShortCircuitMatches","_temp4","errorMessage","findRedirect","resolveData","isRedirectResponse","resolveDeferredResults","currentMatches","signals","isRevalidatingLoader","resolveDeferredData","unwrap","getAll","pathMatches","getSubmissionFromNavigation","navigation","getLoadingNavigation","getSubmittingNavigation","getLoadingFetcher","querySelector","getAttribute","initialEntries","initialIndex","entry","createMemoryLocation","clampIndex","min","max","getCurrentLocation","nextLocation","splice","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","router","pendingNavigationController","initialized","historyAction","restoreScrollPosition","preventScrollReset","revalidation","actionData","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","completeNavigation","_location$state","_location$state2","isActionReload","_isRedirect","getSavedScrollPosition","startNavigation","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","actionOutput","interruptActiveLoads","actionMatch","shortCircuited","startRedirectNavigation","pendingActionError","handleAction","fetcherSubmission","activeSubmission","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","abortFetcher","abortPendingFetchRevalidations","loaderResults","callLoadersAndMaybeResolveData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","getFetcher","_temp","isFetchActionRedirect","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","fetchersToLoad","setFetcherError","deleteFetcher","markFetchersDone","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","currentLocation","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","handle","createUseMatchesMatch","y","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","userReplace","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","queryImpl","routeMatch","Response","Location","actionHeaders","loadRouteData","loaderRequest","submit","obj","executedLoaders","fromEntries","query","_temp2","methodNotAllowedMatches","queryRoute","_temp3","_result$activeDeferre","originalPath","prefix","p","array","keyMatch","optional","param","_deepestRenderedBoundaryId"],"mappings":"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"}