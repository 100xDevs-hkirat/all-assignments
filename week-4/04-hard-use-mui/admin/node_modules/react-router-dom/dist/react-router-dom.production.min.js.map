{"version":3,"file":"react-router-dom.production.min.js","sources":["../dom.ts","../index.tsx"],"sourcesContent":["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    let submit = useSubmit();\n    return <FormImpl {...props} submit={submit} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  submit: SubmitFunction | FetcherSubmitFunction;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      submit,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || (method as HTMLFormMethod),\n        formEncType: options.encType || (encType as FormEncType),\n        replace: options.replace,\n        fromRouteId: currentRouteId,\n      });\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n/**\n * Returns the implementation for fetcher.submit\n */\nfunction useSubmitFetcher(\n  fetcherKey: string,\n  fetcherRouteId: string\n): FetcherSubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitFetcher);\n  let { basename } = React.useContext(NavigationContext);\n\n  return React.useCallback<FetcherSubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      invariant(\n        fetcherRouteId != null,\n        \"No routeId available for useFetcher()\"\n      );\n      router.fetch(fetcherKey, fetcherRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || (method as HTMLFormMethod),\n        formEncType: options.encType || (encType as FormEncType),\n      });\n    },\n    [router, basename, fetcherKey, fetcherRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      let submit = useSubmitFetcher(fetcherKey, routeId);\n      return <FormImpl {...props} ref={ref} submit={submit} />;\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: FetcherSubmitFunction;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitFetcher(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No router available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n"],"names":["defaultEncType","isHtmlElement","object","tagName","createSearchParams","init","URLSearchParams","Array","isArray","Object","keys","reduce","memo","key","value","concat","map","v","_formDataSupportsSubmitter","supportedFormEncTypes","Set","getFormEncType","encType","has","getFormSubmissionInfo","target","basename","method","action","formData","body","toLowerCase","attr","getAttribute","stripBasename","FormData","isButtonElement","isInputElement","type","form","Error","document","createElement","e","isFormDataSubmitterSupported","name","prefix","append","undefined","createBrowserRouter","routes","opts","createRouter","future","v7_prependBasename","history","createBrowserHistory","window","hydrationData","parseHydrationData","mapRouteProperties","initialize","createHashRouter","createHashHistory","state","__staticRouterHydrationData","errors","deserializeErrors","entries","serialized","val","__type","ErrorResponse","status","statusText","data","internal","error","message","stack","startTransitionImpl","React","BrowserRouter","children","historyRef","useRef","current","v5Compat","setStateImpl","useState","location","v7_startTransition","setState","useCallback","newState","useLayoutEffect","listen","Router","navigationType","navigator","HashRouter","HistoryRouter","isBrowser","ABSOLUTE_URL_REGEX","Link","forwardRef","onClick","relative","reloadDocument","replace","to","preventScrollReset","rest","ref","absoluteHref","useContext","NavigationContext","isExternal","test","currentUrl","URL","href","targetUrl","startsWith","protocol","path","pathname","origin","search","hash","useHref","internalOnClick","useLinkClickHandler","assign","event","defaultPrevented","NavLink","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","styleProp","useResolvedPath","useLocation","routerState","DataRouterStateContext","toPathname","encodeLocation","locationPathname","nextLocationPathname","navigation","isActive","charAt","length","isPending","ariaCurrent","filter","Boolean","join","Form","props","submit","useSubmit","FormImpl","onSubmit","forwardedRef","formMethod","formAction","useFormAction","preventDefault","submitter","nativeEvent","submitMethod","currentTarget","ScrollRestoration","getKey","storageKey","useScrollRestoration","DataRouterHook","DataRouterStateHook","useDataRouterContext","hookName","ctx","DataRouterContext","invariant","useDataRouterState","replaceProp","navigate","useNavigate","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","hasSetSearchParamsRef","searchParams","useMemo","locationSearch","defaultSearchParams","getAll","forEach","getSearchParamsForLocation","setSearchParams","nextInit","navigateOptions","newSearchParams","validateClientSideSubmission","router","UseSubmit","currentRouteId","useRouteId","options","formEncType","fromRouteId","useSubmitFetcher","fetcherKey","fetcherRouteId","UseSubmitFetcher","fetch","routeContext","RouteContext","match","matches","slice","route","index","params","delete","toString","joinPaths","fetcherId","useFetcher","UseFetcher","routeId","id","String","createFetcherForm","load","fetcher","getFetcher","fetcherWithComponents","useEffect","deleteFetcher","console","warn","useFetchers","UseFetchers","fetchers","values","savedScrollPositions","UseScrollRestoration","restoreScrollPosition","useMatches","useNavigation","scrollRestoration","callback","capture","addEventListener","removeEventListener","usePageHide","scrollY","sessionStorage","setItem","JSON","stringify","sessionPositions","getItem","parse","getKeyWithoutBasename","disableScrollRestoration","enableScrollRestoration","el","getElementById","scrollIntoView","scrollTo","useBeforeUnload","usePrompt","when","blocker","useBlocker","reset","confirm","setTimeout","proceed"],"mappings":"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"}