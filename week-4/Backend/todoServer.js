/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
//const fs = require("fs");
const mongoose = require("mongoose");

const app = express();
const cors = require("cors");

let TODOS = [];

app.use(bodyParser.json());
app.use(cors());

/* const writeTodo = () => {
  fs.writeFile("./files/todoData.txt", JSON.stringify(TODOS), (err) => {
    if (err) {
      console.log(err);
    }
  });
}; */

const todoSchema = new mongoose.Schema({
  title: String,
  description: String,
  completed: Boolean,
});

const Todos = mongoose.model("Todo", todoSchema);

mongoose.connect(
  "mongodb+srv://jagdishrajputca:TEDVEEW65o39QlQx@cluster0.8smof0p.mongodb.net/Todos",
  { useNewUrlParser: true, useUnifiedTopology: true, dbName: "Todos" }
);

app.get("/todos", async (req, res) => {
  //readTodo();
  const todos = await Todos.find({});
  if (todos) {
    return res.json(todos);
  } else {
    return res.status(404).json({ message: "Todos not found" });
  }
});
app.get("/todos/:id", async (req, res) => {
  const selectedTodo = await Todos.findById(req.params.id);
  //console.log(selectedTodo + "======" + req.params.id);
  if (!selectedTodo) {
    return res.status(404).json({ message: "Todos not found" });
  }

  res.json(selectedTodo);
});

app.put("/todos/:id", async (req, res) => {
  //readTodo();
  const selectedTodo = await Todos.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
  });

  //console.log(selectedTodo + "======" + req.params.id);
  if (!selectedTodo) {
    return res.status(404).json({ message: "Todos not found" });
  } else {
    return res.json({ message: "Todo is updated" });
  }
});

app.delete("/todos/:id", async (req, res) => {
  //readTodo();
  const selectedTodo = await Todos.findByIdAndDelete(req.params.id, req.body, {
    new: true,
  });

  //console.log(selectedTodo + "======" + req.params.id);
  if (!selectedTodo) {
    return res.status(404).json({ message: "Todos not found" });
  } else {
    return res.json({ message: "Todo is deleted" });
  }
});

//{ "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
app.post("/todos", async (req, res) => {
  //readTodo();
  const newTodo = new Todos(req.body);
  await newTodo.save();
  return res.status(201).json(newTodo);
});

app.all("*", (req, res) => {
  res.status(404).json({ message: "Route not found" });
});

let port = 3003;
app.listen(3003, function () {
  console.log(`Demo application is listening on port ${port}`);
});

module.exports = app;
