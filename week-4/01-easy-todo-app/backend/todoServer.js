/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const app = express();
const mongoose = require('mongoose');
const secretKey = 'Test@12345';
app.use(cors());
app.use(bodyParser.json());

// Define Todo add schema
const userSchema = new mongoose.Schema({
  username: {type: String},
  password: {type: String},
  todoList: [{unique: true, type: mongoose.Schema.Types.ObjectId, ref: 'TODOS'}]
});

const todosSchema = new mongoose.Schema({
  title: {type: String},
  description: {type: String}
});

const USERS = mongoose.model("USERS",userSchema);
const TODOS = mongoose.model("TODOS",todosSchema);

// connect to mongo db
mongoose.connect('mongodb+srv://vikasbashu:Cb21DWHdt02WyvIc@tycers.o6r8vsu.mongodb.net/TodoApp?retryWrites=true&w=majority', {
  useNewUrlParser: true, useUnifiedTopology: true});


// generate jwt token
const create_token = (payload) => {
  return jwt.sign(payload, secretKey, {algorithm: 'HS256', expiresIn: "1h"});
}

// grab username from token
const token_decrypter = (fieldName, token) => {
  const decodedToken = jwt.verify(token, secretKey);
  if(decodedToken.hasOwnProperty(fieldName))
    return decodedToken[fieldName];
  else return null;  
}

// check for valid credentials
const token_validator = async (token) => {
  let valid = false;
  let valid_account;
  if(! token) return valid;
  token = token.split(" ")[1];
  try{
    const username = token_decrypter('username', token);
    valid_account = await USERS.findOne({username});
    if(valid_account) valid = true;
  }catch(err){
    return false;
  }
  return valid;
}

// Authenticate user at middleware level
const authenticator_middleWare = async (req, res, next) => {
  if(req.url.includes('/users/')) next();
  else await token_validator(req.headers.authorization) ? next() : res.status(401).json({message:"Access denied"});
}
app.use(authenticator_middleWare);  

// User routes
app.post('/todos/users/signup', async (req, res) => {
  // logic to sign up user
  try{
    const {username, password} = req.body;
    const existing_account = await USERS.findOne({username});
    existing_account && res.status(403).json({message: 'username already exists. Please use another one!'});
    if(!existing_account){
      const new_account = new USERS(req.body);
      await new_account.save();
      res.status(201).json({message: 'User created successfully', token: create_token(req.body.username)});
    }
  }catch(err){
    res.status(503).json({message: 'Something went wrong', error:err});
  }
});

app.post('/todos/users/login', async (req, res) => {
  // logic to log in user
  const {username, password} = req.headers;
  const valid__credentials = await USERS.findOne({username, password});
  valid__credentials && res.status(200).send({ message: 'Logged in successfully', token: create_token({username})});
  ! valid__credentials && res.status(401).json({message: "Invalid username or password"});
});

app.post('/todos', async (req, res)=> {
  const username = token_decrypter('username', req.headers.authorization.split(' ')[1]);
  const loggedInUser = await USERS.findOne({username});
  const new_todo_item = new TODOS(req.body);
  await new_todo_item.save();
  loggedInUser.todoList.push(new_todo_item);
  await loggedInUser.save();
  res.status(201).json({message: 'Item addess successfully'});
});

app.get('/todos', async (req, res) => {
  const username = token_decrypter('username', req.headers.authorization.split(' ')[1]);
  const loggedInUser = await USERS.findOne({username}).populate('todoList');
  loggedInUser && res.status(200).json({item: loggedInUser.todoList || []});
  ! loggedInUser && res.status(403).json({message: 'User not found'});
});

app.get('/todos/:id', async (req, res) => {
  const todoId = req.params['id'];
  const foundTodo = await TODOS.findById(todoId);
  (!foundTodo)?res.status(404).json({message: "Invalid id"}):res.status(200).json({item:foundTodo});
});

app.put('/todos/:id', async (req, res) => {
  const updatedData= {...req.body};
  const todoId = req.params['id'];
  const result = await TODOS.findByIdAndUpdate(todoId, updatedData, {new: true});
  result ? res.status(200).json({message:'Item updated successfully'}): res.status(404).json({message: "Invalid id"});
});
app.delete('/todos/:id', async (req, res) => {
  const todoId = req.params['id'];
  const record = await TODOS.findById(todoId);
  const username = token_decrypter('username', req.headers.authorization.split(' ')[1]);
  const loggedInUser = await USERS.findOne({username});
  const result = await TODOS.findByIdAndDelete(todoId);
  loggedInUser.todoList.splice(record, 1);
  await loggedInUser.save();
  result ? res.status(200).json({message:'Item deleted successfully'}): res.status(404).json({message: "Invalid id"});
});

app.listen(3000, console.log(`server is running on 3000`));

module.exports = app;
